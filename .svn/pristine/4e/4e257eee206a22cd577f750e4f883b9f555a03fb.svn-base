package com.skl.cloud.service.user.impl;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.skl.cloud.common.entity.IdEntity;
import com.skl.cloud.common.exception.BusinessException;
import com.skl.cloud.dao.user.UserPermissionMapper;
import com.skl.cloud.model.user.AppUser;
import com.skl.cloud.model.user.Permission;
import com.skl.cloud.model.user.Role;
import com.skl.cloud.service.user.UserPermissionService;

/**
 * 
 * @ClassName: AbstractUserPermissionServiceImpl
 * @Description: TODO
 * <p>Creation Date: 2016年6月1日 and by Author: zhaonao </p>
 *
 * @author $Author$
 * @date $Date$
 * @version  $Revision$
 */
public abstract class AbstractUserPermissionServiceImpl<T extends IdEntity> extends AbstractUserServiceImpl<T> implements UserPermissionService<T> {

	@Autowired
	private UserPermissionMapper userPermissionMapper;

	@Override
	@Transactional
	public void addUserRole(Long userId, Long roleId, Long cameraId) throws BusinessException {
		userPermissionMapper.insertUserRole(userId, roleId, cameraId);
	}

	@Override
	@Transactional
	public void addRolePermission(Long roleId, Long permissionId) throws BusinessException {
		userPermissionMapper.insertRolePermission(roleId, permissionId);

	}

	@Override
	@Transactional
	public void deleteUserRole(Long userId, Long roleId, Long cameraId) throws BusinessException {
		userPermissionMapper.deleteUserRole(userId, roleId, cameraId);

	}

	@Override
	@Transactional
	public void deleteRolePermission(Long roleId, Long permissionId) throws BusinessException {
		userPermissionMapper.deleteRolePermission(roleId, permissionId);

	}

	@Override
	@Transactional(readOnly = true)
	public List<AppUser> queryUserRole(Long roleId) throws BusinessException {
		return userPermissionMapper.queryUserRole(roleId);
	}

	@Override
	@Transactional(readOnly = true)
	public List<Role> queryRoleUser(Long userId) throws BusinessException {
		return userPermissionMapper.queryRoleUser(userId);
	}

	@Override
	@Transactional(readOnly = true)
	public List<Role> queryRolePermission(Long permissionId) throws BusinessException {
		return userPermissionMapper.queryRolePermission(permissionId);
	}

	@Override
	@Transactional(readOnly = true)
	public List<Permission> queryPermissionRole(Long roleId) throws BusinessException {
		return userPermissionMapper.queryPermissionRole(roleId);
	}

	@Override
	@Transactional(readOnly = true)
	public Set<String> findRoleName(Long userId) throws BusinessException {
		List<Role> list = this.queryRoleUser(userId);
		Set<String> roleSet = new HashSet<String>();
		if (list != null) {
			for (Role role : list) {
				roleSet.add(role.getName());
			}
		}
		return roleSet;
	}

	@Override
	@Transactional(readOnly = true)
	public Set<String> findPermission(Long userId) throws BusinessException {
		List<Role> roleList = this.queryRoleUser(userId);
		Set<String> permissionSet = new HashSet<String>();
		if (roleList != null) {
			for (Role role : roleList) {
				List<Permission> permissionList = this.queryPermissionRole(role.getRoleId());
				if (permissionList != null) {
					for (Permission permission : permissionList) {
						permissionSet.add(permission.getPermission());
					}
				}
			}
		}
		return permissionSet;
	}
}
